#+title: Emacs, μlisp and the Raspberry Pi Pico
#+author: Kai Harries
#+email: kai.harries@posteo.de

The below was tested on a NixOS 22.11 but should also work on other
Linux distributions.  If you happen to have /nix/ you can execute
=nix-shell= in the path where the [[file:shell.nix][shell.nix]] is located to get an
environment with the /arduino-cli/.  Otherwise install /arduino-cli/
by some other means.

* The Arduino CLI
[[https://arduino.github.io/arduino-cli/0.30/getting-started/][Getting started]]

** Looking at the built-in help
#+begin_src bash :results output
  arduino-cli --help
#+end_src

#+begin_src bash :results output
  arduino-cli board --help
#+end_src

#+begin_src bash :results output
  arduino-cli compile --help
#+end_src

** Exploring supported boards and board options
#+caption: List all supported boards
#+begin_src bash :results output
  arduino-cli board listall
#+end_src

#+caption: List board options
#+begin_src bash :results output
  arduino-cli board details --no-color --fqbn pico:rp2040:rpipico
#+end_src

* Preparation of the Raspberry Pi Pico
Derived from the [[http://www.ulisp.com/show?3KN3][official μlisp installation instructions]].

** Arduino core
Use [[https://github.com/earlephilhower/arduino-pico][Earle Philhower’s Raspberry Pi Pico/RP2040 Arduino core]].

#+caption: Install Arduino core from Git repository
#+begin_src bash :results output
  set -ex
  mkdir -p ~/Arduino/hardware/pico
  git clone https://github.com/earlephilhower/arduino-pico.git ~/Arduino/hardware/pico/rp2040
  cd ~/Arduino/hardware/pico/rp2040
  git submodule update --init
  cd pico-sdk
  git submodule update --init
  cd ../tools
  python3 ./get.py
#+end_src

*** Installing the core with arduino-cli
#+caption: Update the index of cores
#+begin_src bash :results output
  arduino-cli core update-index
#+end_src

#+caption: List connected boards
#+begin_src bash :results output
  arduino-cli board list
#+end_src

#+caption: Show the core currently installed on the Pico
#+begin_src bash :results output
  arduino-cli core list
#+end_src

#+caption: Install the core on the Pico
#+begin_src bash :eval no
  arduino-cli core install pico:rp2040
#+end_src

** μlisp
Use [[https://github.com/technoblogy/ulisp-arm][ARM version of μlisp]].

#+caption: Get the μlisp source
#+begin_src bash :results silent
  mkdir -p ./ulisp-arm
  cd ./ulisp-arm/
  curl -O https://raw.githubusercontent.com/technoblogy/ulisp-arm/master/ulisp-arm.ino
#+end_src

#+caption: Compile μlisp
#+begin_src bash :results output
  arduino-cli compile --no-color \
    --output-dir ./ulisp-arm \
    --board-options flash=2097152_1048576 \
    --fqbn pico:rp2040:rpipico \
    ulisp-arm
#+end_src

#+caption: Install μlisp on the Pico
#+begin_src bash :results output
  arduino-cli upload \
    --input-dir ./ulisp-arm/ \
    --port /dev/ttyACM0 \
    --fqbn pico:rp2040:rpipico
#+end_src

* Using μlisp
#+caption: Open serial console of the Pico
#+begin_src emacs-lisp :results none
  (serial-term "/dev/ttyACM0" 9600)
  (switch-to-buffer "README.org")
  (split-window-below)
  (switch-to-buffer-other-window "/dev/ttyACM0")
#+end_src

#+caption: Define convenience function to send lisp code to the Pico
#+begin_src emacs-lisp :results silent
  (defun send-to-pico ()
    (interactive)
    (let ((element (org-element-at-point)))
      (cond
       ((not (equal 'src-block (car element)))
        (error "element at point is not a src-block"))
       ((not (equal "lisp" (plist-get (cadr element) ':language)))
        (error "src-block language is not lisp"))
       (t
        (process-send-string "/dev/ttyACM0" (plist-get (cadr element) ':value))))))

  (bind-key (kbd "C-S-c C-S-c") 'send-to-pico)
#+end_src

Now you can place the cursor on one of the lisp code blocks below and
execute =M-x send-to-pico= to execute them on the Pico.

#+caption: Get some feedback from the Pico
#+begin_src lisp :eval no
  (+ 1 1)
#+end_src

#+caption: Print help for some function/special form
#+begin_src lisp :eval no
  (? dotimes)
#+end_src

#+caption: Define two functions that control the LED
#+begin_src lisp :eval no
  (defun blink (&optional x)
    "Let the LED blink forever."
    (pinmode :led-builtin :output)
    (digitalwrite :led-builtin x)
    (delay 1000)
    (blink (not x)))

  (defun pulse ()
    "Let the LED pulsate forever."
    (let (down)
      (loop
       (dotimes (x 256)
         (delay 5)
         (analogwrite :led-builtin (if down (- 255 x) x)))
       (setq down (not down)))))
#+end_src

Now you can make the led blink or pulse by typing =(blink)= or
=(pulse)= at the μlisp command prompt in the serial console.

To end the execution of the function press the escape char (=~=).

#+caption: Save our new functions into an image
#+begin_src lisp :eval no
  (save-image)
#+end_src

Unplug and plug the Pico.

#+caption: Reload our functions from the previously saved image and run /blink/
#+begin_src lisp :eval no
  (load-image)
  (blink)
#+end_src

* Blinking primes
Taken from [[http://www.ulisp.com/show?23YJ][here]].

#+begin_src lisp :eval no
  (defun prime (n)
    "Return t iff the given number n is a prime."
    (let ((d 2))
      (loop
       (when (> (* d d) n) (return t))
       (when (zerop (mod n d)) (return nil))
       (incf d))))

  (defun blink-primes ()
    "Blink an increasing series of prime numbers on the LED.  For a prime
  number n the LED blinks n times (0.5 seconds period).  After each
  prime there is an 1.5 seconds pause "
    (pinmode :led-builtin :output)
    (dotimes (x 32767)
      (when (and (> x 1) (prime x))
        (print x)
        (princ " = ")
        (dotimes (f (* x 2))
          (if (evenp f)
              (progn
                (digitalwrite :led-builtin t)
                (princ "|"))
            (digitalwrite :led-builtin nil))
          (delay 250))
        (delay 1500))))

  (blink-primes)
#+end_src

* Controlling a car on a Carrera racetrack
Useful references:
- [[http://www.ulisp.com/show?3L][uLisp - Language reference]]
- [[http://www.ulisp.com/show?1MWO][uLisp - Using interrupts]] (not implemented for the Pico)
- [[https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html][Raspberry Pi Documentation - Raspberry Pi Pico and Pico W]]
- [[https://datasheets.raspberrypi.com/pico/Pico-R3-A4-Pinout.pdf][Raspberry Pi Pico - Pinout]]

#+caption: Programm for controlling one car on the racetrack
#+begin_src lisp :eval no
  ;; TODO change pins
  ;; Alias for the controller pin
  (defvar +controller-pin+ 25)
  ;; List of the hall-sensor pins
  (defvar +sensor-pins+ '(6 7 8 9 10 11 12))

  ;; Closure that returns the number of the last passed checkpoint, or nil if no new checkpoint was past since the last call.
  (defvar last-checkpoint
    (let ((prev-checkpoint -1))
      (lambda ()
        (let ((sensor (first-active-sensor +sensor-pins+)))
          (when (and sensor (/= sensor prev-checkpoint))
            (setq prev-checkpoint sensor)
            sensor)))))

  (defun first-active-sensor (sensors &optional (idx 1))
    "Return the index of the first (low) active sensor or nil if no sensor was active."
    (when sensors
      (if (not (digitalread (car sensors)))
          idx
        (first-active-sensor (cdr sensors) (+ idx 1)))))

  (defun throttle (v1 &optional t1 v2)
    "Change the throttle to v1.  Optional change to v2 after t1 milliseconds.  Valid values for v1 and v2 are 0-255."
    (analogwrite +controller-pin+ v1)
    (when (and t1 v2)
      (delay t1)
      (analogwrite +controller-pin+ v2)))

  (defun enter-loop (&optional rounds)
    "Enter the control loop.  Loop forever (default) or exit after rounds."
    (mapcar (lambda (x) (pinmode x :input)) +sensor-pins+)
    (throttle 64)  ;; Start speed until first checkpoint
    (loop
     (let ((checkpoint (last-checkpoint)))
       (when checkpoint (princ checkpoint) (write-line "p"))  ;; XXX Only for debugging
       (case checkpoint
             (1 (throttle 255 400 32) (if rounds (decf rounds)))
             (2 (throttle 255 400 32))
             (3 (throttle 255 400 32))
             (4 (throttle 255 400 32))
             (5 (throttle 255 400 32))
             (6 (throttle 255 400 32))
             (7 (throttle 255 400 32)))
       (when (and rounds (< rounds 1))
             (throttle 0)
             (return)))))
#+end_src

#+caption: Mock the digitalread function
#+begin_src lisp :eval no
  (defun digitalread () nil)
  (defun mock-digitalread (pin-offset &optional (cycle 0))
    "Mock digitralread for testing.  Nil means sensor is activated."
    (setf digitalread
          (lambda (pin)
            (incf cycle)
            (if (< (mod cycle 2000) 8)
                (let ((n (/ cycle 2000)))
                  (if (<= 8 n) (setq cycle 0))
                  (let ((x (- pin pin-offset n)))
                    (not (and (> x -1) (<= x 0)))))
              t))))

  (mock-digitalread 5)
#+end_src

#+caption: Test
#+begin_src lisp :eval no
  (enter-loop 3)
#+end_src

#+caption: Test the mocked digitalread
#+begin_src lisp :eval no
  (dotimes (x 10000) (if (digitalread 7) (print x)))
#+end_src

* Playground
#+caption: Test recursive lambdas
#+begin_src lisp :eval no
  (defvar myf (let* ((f (lambda (n)
                          (print n)
                          (if (> n 4)
                              n
                            (f (+ n 1))))))
                (lambda (n) (f n))))
  (myf 0)
#+end_src
